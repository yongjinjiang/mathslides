{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","fonts","header","text","template","justifyContent","position","bottom","width","padding","App","transitionEffect","elementNum","fontSize","mediumfont","style","color","target","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NA6BMA,G,KAAQ,CACZC,MAAO,CACLC,OAAQ,sDACRC,KAAM,yDAMJC,EAAW,kBACf,kBAAC,IAAD,CACEC,eAAe,gBACfC,SAAS,WACTC,OAAQ,EACRC,MAAO,GAEP,kBAAC,IAAD,CAAKC,QAAQ,SACX,kBAAC,IAAD,OAEF,kBAAC,IAAD,CAAKA,QAAQ,OACX,kBAAC,IAAD,SAmESC,MA1Df,WACE,OACE,kBAAC,IAAD,CAAMV,MAAOA,EAAOI,SAAUA,EAAUO,iBAAiB,QACvD,kBAAC,IAAD,KACE,kBAAC,IAAD,8BAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,+BAKF,kBAAC,IAAD,KAEH,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAQC,YAAa,GACrB,kBAAC,IAAD,CAAMC,SAAU,CAACC,WAlBH,KAkBd,0BAMA,kBAAC,IAAD,CAAQF,WAAY,GACpB,kBAAC,IAAD,KACM,0BAAMG,MAAO,CAACF,SAAU,SAAxB,0FACkG,uBAAGE,MAAO,CAACC,MAAM,OAAQC,OAAO,SAASC,KAAK,qDAA9C,qCAKxG,kBAAC,IAAD,CAAQN,WAAY,GACpB,kBAAC,IAAD,KACM,0BAAMG,MAAO,CAACF,SAAU,SAAxB,+BACuC,uBAAGE,MAAO,CAACC,MAAM,OAAQC,OAAO,SAASC,KAAK,6BAA9C,iBAM7C,kBAAC,IAAD,CAAQN,WAAY,GACpB,kBAAC,IAAD,KACM,0BAAMG,MAAO,CAACF,SAAU,SAAxB,kCAC0C,uBAAGE,MAAO,CAACC,MAAM,OAAQC,OAAO,SAAUC,KAAK,2BAA/C,wBAI9C,kBAAC,IAAD,KACE,wkBC7FaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.089beeaf.chunk.js","sourcesContent":["import React from 'react';\n// import { Deck, Slide, Heading } from 'spectacle';\n\nimport {\n  Appear,\n  Box,\n  CodePane,\n  CodeSpan,\n  Deck,\n  FlexBox,\n  FullScreen,\n  Grid,\n  Heading,\n  Image,\n  ListItem,\n  Markdown,\n  Notes,\n  OrderedList,\n  Progress,\n  Slide,\n  SpectacleLogo,\n  Stepper,\n  Text,\n  UnorderedList,\n  indentNormalizer\n} from 'spectacle';\nimport { fontSize } from 'styled-system';\n\n// SPECTACLE_CLI_THEME_START\nconst theme = {\n  fonts: {\n    header: '\"Open Sans Condensed\", Helvetica, Arial, sans-serif',\n    text: '\"Open Sans Condensed\", Helvetica, Arial, sans-serif'\n  }\n};\n// SPECTACLE_CLI_THEME_END\n\n// SPECTACLE_CLI_TEMPLATE_START\nconst template = () => (\n  <FlexBox\n    justifyContent=\"space-between\"\n    position=\"absolute\"\n    bottom={0}\n    width={1}\n  >\n    <Box padding=\"0 1em\">\n      <FullScreen />\n    </Box>\n    <Box padding=\"1em\">\n      <Progress />\n    </Box>\n  </FlexBox>\n);\n// SPECTACLE_CLI_TEMPLATE_END\n\nvar smallfont = 20;\nvar mediumfont = 30;\n\nfunction App() {\n  return (\n    <Deck theme={theme} template={template} transitionEffect=\"fade\">\n      <Slide>\n        <Heading>Welcome to Spectacle</Heading>\n      </Slide>\n      <Slide>\n        <Heading>Welcome to Spectacle2</Heading>\n      </Slide>\n\n\n\n      <Slide>\n   \n   <FlexBox>\n   <Appear elementNum={-1}>\n   <Text fontSize={{mediumfont}}>Coding  编程\n </Text>\n   </Appear>\n    </FlexBox>  \n   \n\n   <Appear elementNum={0}>\n   <Text>\n         <span style={{fontSize: \"30px\"}}>\n                    1. Pulled a dataset from United States Geological Surve(USGS) and put them into a map: <a style={{color:\"red\"}} target=\"_blank\" href=\"https://yongjinjiang.github.io/Mapping-earthquake\">Earthquake in the past 7 days.</a>\n                </span> \n                </Text>\n   </Appear>\n\n   <Appear elementNum={1}>\n   <Text>\n         <span style={{fontSize: \"30px\"}}>\n                    2. Made a personal website: <a style={{color:\"red\"}} target=\"_blank\" href=\"https://yongjinjiang.com/\">my website</a>\n                </span> \n                </Text>\n   </Appear>\n   \n\n   <Appear elementNum={2}>\n   <Text>\n         <span style={{fontSize: \"30px\"}}>\n                    3. Working on a math game app: <a style={{color:\"red\"}} target=\"_blank\"  href=\"http://0.0.0.0:8000/#/6\">A simple game app</a>\n                </span> \n                </Text>\n   </Appear>\n     <Notes>\n       <p>\n       大家如果觉得好玩，在学好数学的基础上，我会教你们编程，用计算机来帮我们解决一些麻烦的数学问题\n（比如怎么计算1000里面的质数，或者在1000里面验证哥德巴赫猜想），或者从头开始做一个简易家庭网站。\n       </p>\n     </Notes>\n   </Slide>\n\n\n    </Deck>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}