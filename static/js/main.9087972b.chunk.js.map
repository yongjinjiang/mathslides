{"version":3,"sources":["Game1.js","../node_modules/jspdf/dist sync","tablePlaceValue.js","App.js","serviceWorker.js","index.js"],"names":["d3","require","fontSize","inputSize","xSound","document","getElementById","N2Circles","ncopy","data","d3Container","useRef","useEffect","console","log","current","update","select","append","selectAll","enter","attr","d","i","style","exit","remove","className","width","height","ref","useNewTimer","currentDate","count","setCount","React","useState","date","setDate","timerID","setInterval","Date","play","tick","clearInterval","Clock","props","timer","toLocaleTimeString","toString","jsUcfirst","string","charAt","toUpperCase","slice","Game1","num1","setNum1","num2","setNum2","result","setResult","score","setScore","mySubmitHandler","event","preventDefault","res","Number","Math","floor","random","alert","myChangeHandler","target","name","value","eval","setTimeout","onSubmit","type","onChange","size","fill","strokeWidth","stroke","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Table","title","name_en","columns","field","theme","fonts","header","text","template","justifyContent","position","bottom","padding","App","transitionEffect","color","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9087972b.chunk.js","sourcesContent":["import React, { useState , useRef, useEffect } from 'react';\nvar d3 = require(\"d3\");\n\nvar fontSize=30\nvar inputSize=\"6\"\nvar xSound = document.getElementById(\"myAudio\"); \n\nfunction N2Circles({ncopy,data}){\n  const d3Container = useRef(null);\n  \n  useEffect(() => {\n    \n    console.log(d3Container.current);\n    \n    const svg = d3.select(d3Container.current);\n    // Bind D3 data\n    const update = svg\n    .append('g')\n    .selectAll('circle')\n    .data(data);\n    \n    // <circle cx=\"50\" cy=\"50\" r=\"20\" stroke=\"green\" strokeWidth=\"4\" fill=\"yellow\" />\n    // Enter new D3 elements\n    update.enter()\n    .append('circle')\n    .attr('cx', (d, i) => \"50\")\n    .attr('cy', (d, i) => i * 50+50)\n    .attr('r', 24)\n    .style('stroke',\"green\")\n    .style('strokeWidth',\"4\")\n    .style(\"fill\",\"yellow\")\n    \n    // Update existing D3 elements\n    update\n    .attr('cx', (d, i) => \"50\")\n    .attr('cy', (d, i) => i * 50+50)\n    .attr('r', 24)\n    .style('stroke',\"green\")\n    .style('strokeWidth',\"4\")\n    .style(\"fill\",\"yellow\")\n    \n    // Remove old D3 elements\n    update.exit()\n    .remove();\n    \n    \n  },[data,d3Container])\n  \n  return (\n    <svg\n    className=\"d3-component\"\n    width={400}\n    height={200}\n    ref={d3Container}\n    />\n    );\n  }\n  \n  function useNewTimer(currentDate, count, setCount) {\n    const [date, setDate] = React.useState(currentDate);\n    // const [count, setCount] = React.useState(0);\n    // let [timerID, setTimerID]=React.useState(null);\n    // var timerID\n    React.useEffect(() => {\n    var timerID = setInterval(() => tick(), 1000 );\n\n      // setTimerID(setInterval( () => tick(), 1000 ))\n      return function cleanup() {\n        clearInterval(timerID);\n        //   console.log(\"heres\")  \n      };\n    });\n    \n    function tick() {\n      if (count<=10){\n      setDate(new Date());\n      setCount(count+1);\n    //   console.log(count)\n      }\n      if (count == 10){\n        // this.setState({done: '<div style={fontSize:\"100px\"}>Time reached! You got <font style={color:\"red\"}>'+this.state.score+'</font> scores!',color:\"red\"})\n        xSound.play() \n        console.log(count)\n        // clearInterval(timerID)\n        //  clearInterval(this.timerID);\n      }\n    }\n    \n    return [date,count]\n  }    \n  \n  export function Clock(props) {\n    //Here we reference our custom hook\n    const [timer, count] = useNewTimer(new Date(), props.count, props.setCount);\n    \n    return (\n      <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {timer.toLocaleTimeString()}.</h2>\n      <h2>It is {count.toString()}.</h2>\n      </div>\n      );\n    }     \n    function jsUcfirst(string) \n    {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n    \n    function Game1() {\n      \n      let  [num1,setNum1]=useState(1);\n      let  [num2,setNum2]=useState(1);\n      let  [result,setResult]=useState(\"\");\n      let  [score,setScore]=useState(0);\n      let  [count,setCount]=useState(0);\n      \n      \n      const  mySubmitHandler = (event) => {\n        event.preventDefault();\n        \n        let res=Number(num1)+Number(num2);\n        if(res === Number(result)){\n          setScore(score+1)\n        } \n        setNum1(Math.floor(Math.random() * 10))\n        setNum2(Math.floor(Math.random() * 10))\n        setResult(\"\")\n        // this.setState({num1:Math.floor(Math.random() * 10),num2:Math.floor(Math.random() * 10),\n        //                 result:\"\"})\n        alert(\"The total is \" + res);\n      }\n      const myChangeHandler = (event) => {\n        event.preventDefault();\n        \n        const { target: { name, value } } = event\n        \n        eval(\"set\"+jsUcfirst(name))(value)\n        // this.setState({ [name]: value});\n        \n        \n        let res=Number(num1)+Number(num2);\n        // console.log(\"res=, result=\",res, this.state.result);\n        // console.log(\"res=\",res === parseInt(this.state.result));\n        \n        if(res === Number(value)){\n          // console.log(\"input==========\",name,value);\n          setTimeout(()=>\n          {setScore(score+1);\n            setNum1(Math.floor(Math.random() * 10));\n            setNum2(Math.floor(Math.random() * 10));\n            setResult(\"\")}\n            ,200)\n          } \n        }\n        \n        \n        return (\n          \n          <div className=\"circleRow\">\n          <Clock count={count} setCount={setCount} />\n          \n          <form onSubmit={mySubmitHandler} >\n          \n          {/* <p>Enter two numbers, and submit:</p> */}\n          <input style={{fontSize:fontSize}}\n          type='text'\n          name='num1'\n          // value= {this.state.num1}\n          value={num1}\n          onChange={myChangeHandler}\n          size={inputSize}\n          /> \n          \n          <font style={{fontSize:fontSize}}>{\"  \"}+{\"  \"}</font>\n          \n          <input style={{fontSize:fontSize}}\n          type='text'\n          name='num2'\n          // value= {this.state.num2}\n          value={num2}\n          onChange={myChangeHandler}\n          size={inputSize}\n          /> \n          \n          <font style={{fontSize:fontSize}}>{\"  \"}={\"  \"}</font>\n          \n          <input style={{fontSize:fontSize}}\n          type='text'\n          name='result'\n          // value={this.state.result}\n          value={result}\n          onChange={myChangeHandler}\n          size={inputSize}\n          />\n          \n          <input style={{fontSize:fontSize}}\n          type='submit'\n          value=\"Next\"\n          size={inputSize}\n          />\n          {/* <div dangerouslySetInnerHTML={{ __html: this.state.done}} /> */}\n          </form>\n          \n          \n          \n          \n          \n          \n          {/* <div> */}\n          {/* <svg width=\"100\" height=\"100\">  */}\n          {/* <circle cx=\"50\" cy=\"50\" r=\"20\" stroke=\"green\" strokeWidth=\"4\" fill=\"yellow\" />\n        <circle cx=\"90\" cy=\"50\" r=\"20\" stroke=\"green\" strokeWidth=\"4\" fill=\"yellow\" /> */}\n        <N2Circles ncopy={2} data={[1,2]} />\n        \n        <svg width=\"400\" height=\"110\">\n        <rect width=\"300\" height=\"100\" style={{fill:\"rgb(0,0,255)\",strokeWidth:\"3\",stroke:\"rgb(0,0,0)\"}} />\n        Sorry, your browser does not support inline SVG.  \n        </svg>\n        \n        \n        \n        </div>\n        \n        \n        );\n        \n      }\n      \n      \n      export default Game1;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 333;","import React from 'react';\nimport MaterialTable from \"material-table\";\nexport const Table = () => {\n    const data = [\n      { name: \"个\", name_en: \"one\", value: 1},\n      { name: \"十\", name_en: \"ten\", value: 10},\n      { name: \"百\", name_en: \"hundred\", value: 100 },\n      { name: \"千\", name_en: \"thousand\", value: 1000},\n      { name: \"万\", name_en: \"ten thousand\", value: \"10,000\"},\n      { name: \"十万\", name_en: \"hundred thousand\", value: \"100,000\"},\n      { name: \"百万\", name_en: \"million\", value: \"1,000,000\"},\n      { name: \"千万\", name_en: \"ten milliion\", value: \"10,000,000\"},\n      { name: \"亿\", name_en: \"hundred million\", value: \"100,000,000\"},\n      { name: \"十亿\", name_en: \"billion\", value: \"1000,000,000\"},\n    ];\n  \n    const columns = [\n      {\n        title: \"中文位值\",\n        field: \"name\",\n      },\n      {\n        title: \"英文位值\",\n        field: \"name_en\",\n      },\n      {\n        title: \"数值\",\n        field: \"value\",\n      }\n    ];\n  \n    return (\n      <MaterialTable title=\"Place Values\" data={data} columns={columns} />\n    );\n  };","import React from 'react';\nimport Game1 from './Game1';\nimport {Table} from './tablePlaceValue'; \n// import { Deck, Slide, Heading } from 'spectacle';\n\nimport {\n  Appear,\n  Box,\n  CodePane,\n  CodeSpan,\n  Deck,\n  FlexBox,\n  FullScreen,\n  Grid,\n  Heading,\n  Image,\n  ListItem,\n  Markdown,\n  Notes,\n  OrderedList,\n  Progress,\n  Slide,\n  SpectacleLogo,\n  Stepper,\n  Text,\n  UnorderedList,\n  indentNormalizer\n} from 'spectacle';\nimport { fontSize } from 'styled-system';\n\n// SPECTACLE_CLI_THEME_START\nconst theme = {\n  fonts: {\n    header: '\"Open Sans Condensed\", Helvetica, Arial, sans-serif',\n    text: '\"Open Sans Condensed\", Helvetica, Arial, sans-serif'\n  }\n};\n// SPECTACLE_CLI_THEME_END\n\n// SPECTACLE_CLI_TEMPLATE_START\nconst template = () => (\n  <FlexBox\n    justifyContent=\"space-between\"\n    position=\"absolute\"\n    bottom={0}\n    width={1}\n  >\n    <Box padding=\"0 1em\">\n      <FullScreen />\n    </Box>\n    <Box padding=\"1em\">\n      <Progress />\n    </Box>\n  </FlexBox>\n);\n// SPECTACLE_CLI_TEMPLATE_END\n\nvar smallfont = 20;\nvar mediumfont = 30;\n\n\n\n\n\nfunction App() {\n  return (\n    <Deck theme={theme} template={template} transitionEffect=\"fade\">\n      {/* <Slide>\n        <Heading>Welcome to Spectacle</Heading>\n      </Slide>\n      <Slide>\n        <Heading>Welcome to Spectacle2</Heading>\n      </Slide> */}\n\n\n\n      {/* <Slide>\n   \n   <FlexBox>\n   <Appear elementNum={-1}>\n   <Text fontSize={{mediumfont}}>Coding  编程\n </Text>\n   </Appear>\n    </FlexBox>  \n   \n\n   <Appear elementNum={0}>\n   <Text>\n         <span style={{fontSize: \"30px\"}}>\n                    1. Pulled a dataset from United States Geological Surve(USGS) and put them into a map: <a style={{color:\"red\"}} target=\"_blank\" href=\"https://yongjinjiang.github.io/Mapping-earthquake\">Earthquake in the past 7 days.</a>\n                </span> \n                </Text>\n   </Appear>\n\n   <Appear elementNum={1}>\n   <Text>\n         <span style={{fontSize: \"30px\"}}>\n                    2. Made a personal website: <a style={{color:\"red\"}} target=\"_blank\" href=\"https://yongjinjiang.com/\">my website</a>\n                </span> \n                </Text>\n   </Appear>\n   \n\n   <Appear elementNum={2}>\n   <Text>\n         <span style={{fontSize: \"30px\"}}>\n                    3. Working on a math game app: <a style={{color:\"red\"}} target=\"_blank\"  href=\"http://0.0.0.0:8000/#/6\">A simple game app</a>\n                </span> \n                </Text>\n   </Appear>\n     <Notes>\n       <p>\n       大家如果觉得好玩，在学好数学的基础上，我会教你们编程，用计算机来帮我们解决一些麻烦的数学问题\n（比如怎么计算1000里面的质数，或者在1000里面验证哥德巴赫猜想），或者从头开始做一个简易家庭网站。\n       </p>\n     </Notes>\n   </Slide>\n\n<Slide>\n  <Game1  />\n </Slide> */}\n\n\n <Slide>\n\n    <Table />\n  \n </Slide>\n\n\n <Slide>\n\n<Table />\n\n</Slide>\n\n<Slide>\n<span style={{color:\"white\", fontSize:\"60px\"}}>Let's practise</span>\n<span style={{color:\"#f542f5\", fontSize:\"55px\"}}>4th grade</span>\n<a href=\"https://www.ixl.com/math/grade-4/multiply-by-10-or-100\"><span style={{color:\"yellow\", fontSize:\"30px\"}}>1. multiply-by-10-or-100</span></a>\n<a href=\"https://www.ixl.com/math/grade-4/multiplication-patterns-over-increasing-place-values\"><span style={{color:\"yellow\", fontSize:\"30px\"}}>2. Multiplication patterns over increasing place values\n</span></a>\n\n\n<br/><br/><br/>\n<span style={{color:\"#f542f5\", fontSize:\"55px\"}}>5th grade</span>\n<a href=\"https://www.ixl.com/math/grade-5/place-value\"><span style={{color:\"yellow\", fontSize:\"30px\"}}>1. place value</span></a>\n<a href=\"writing-numbers-in-words-convert-words-to-digits\"><span style={{color:\"yellow\", fontSize:\"30px\"}}>2. Writing numbers in words: convert words to digits\n</span></a>\n</Slide>\n\n</Deck>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Game1 from './Game1';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// ReactDOM.render(<Game1  />, document.getElementById('game1'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}